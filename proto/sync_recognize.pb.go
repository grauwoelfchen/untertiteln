// Code generated by protoc-gen-go.
// source: proto/sync_recognize.proto
// DO NOT EDIT!

/*
Package google_cloud_speech_v1beta1 is a generated protocol buffer package.

It is generated from these files:
	proto/sync_recognize.proto

It has these top-level messages:
	SpeechContext
	RecognitionConfig
	RecognitionAudio
	SyncRecognizeRequest
	SpeechRecognitionAlternative
	SpeechRecognitionResult
	SyncRecognizeResponse
*/
package google_cloud_speech_v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RecognitionConfig_AudioEncoding int32

const (
	RecognitionConfig_ENCODING_UNSPECIFIED RecognitionConfig_AudioEncoding = 0
	RecognitionConfig_LINEAR16             RecognitionConfig_AudioEncoding = 1
	RecognitionConfig_FLAC                 RecognitionConfig_AudioEncoding = 2
	RecognitionConfig_MULAW                RecognitionConfig_AudioEncoding = 3
	RecognitionConfig_AMR                  RecognitionConfig_AudioEncoding = 4
	RecognitionConfig_AMR_WB               RecognitionConfig_AudioEncoding = 5
)

var RecognitionConfig_AudioEncoding_name = map[int32]string{
	0: "ENCODING_UNSPECIFIED",
	1: "LINEAR16",
	2: "FLAC",
	3: "MULAW",
	4: "AMR",
	5: "AMR_WB",
}
var RecognitionConfig_AudioEncoding_value = map[string]int32{
	"ENCODING_UNSPECIFIED": 0,
	"LINEAR16":             1,
	"FLAC":                 2,
	"MULAW":                3,
	"AMR":                  4,
	"AMR_WB":               5,
}

func (x RecognitionConfig_AudioEncoding) String() string {
	return proto.EnumName(RecognitionConfig_AudioEncoding_name, int32(x))
}
func (RecognitionConfig_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type SpeechContext struct {
	Phrases []string `protobuf:"bytes,1,rep,name=phrases" json:"phrases,omitempty"`
}

func (m *SpeechContext) Reset()                    { *m = SpeechContext{} }
func (m *SpeechContext) String() string            { return proto.CompactTextString(m) }
func (*SpeechContext) ProtoMessage()               {}
func (*SpeechContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RecognitionConfig struct {
	Encoding        RecognitionConfig_AudioEncoding `protobuf:"varint,1,opt,name=encoding,enum=google.cloud.speech.v1beta1.RecognitionConfig_AudioEncoding" json:"encoding,omitempty"`
	SampleRate      int32                           `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	LanguageCode    string                          `protobuf:"bytes,3,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	MaxAlternatives int32                           `protobuf:"varint,4,opt,name=max_alternatives,json=maxAlternatives" json:"max_alternatives,omitempty"`
	ProfanityFilter bool                            `protobuf:"varint,5,opt,name=profanity_filter,json=profanityFilter" json:"profanity_filter,omitempty"`
	SpeechContext   *SpeechContext                  `protobuf:"bytes,6,opt,name=speech_context,json=speechContext" json:"speech_context,omitempty"`
}

func (m *RecognitionConfig) Reset()                    { *m = RecognitionConfig{} }
func (m *RecognitionConfig) String() string            { return proto.CompactTextString(m) }
func (*RecognitionConfig) ProtoMessage()               {}
func (*RecognitionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RecognitionConfig) GetSpeechContext() *SpeechContext {
	if m != nil {
		return m.SpeechContext
	}
	return nil
}

type RecognitionAudio struct {
	// Types that are valid to be assigned to AudioSource:
	//	*RecognitionAudio_Content
	//	*RecognitionAudio_Uri
	AudioSource isRecognitionAudio_AudioSource `protobuf_oneof:"audio_source"`
}

func (m *RecognitionAudio) Reset()                    { *m = RecognitionAudio{} }
func (m *RecognitionAudio) String() string            { return proto.CompactTextString(m) }
func (*RecognitionAudio) ProtoMessage()               {}
func (*RecognitionAudio) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isRecognitionAudio_AudioSource interface {
	isRecognitionAudio_AudioSource()
}

type RecognitionAudio_Content struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3,oneof"`
}
type RecognitionAudio_Uri struct {
	Uri string `protobuf:"bytes,2,opt,name=uri,oneof"`
}

func (*RecognitionAudio_Content) isRecognitionAudio_AudioSource() {}
func (*RecognitionAudio_Uri) isRecognitionAudio_AudioSource()     {}

func (m *RecognitionAudio) GetAudioSource() isRecognitionAudio_AudioSource {
	if m != nil {
		return m.AudioSource
	}
	return nil
}

func (m *RecognitionAudio) GetContent() []byte {
	if x, ok := m.GetAudioSource().(*RecognitionAudio_Content); ok {
		return x.Content
	}
	return nil
}

func (m *RecognitionAudio) GetUri() string {
	if x, ok := m.GetAudioSource().(*RecognitionAudio_Uri); ok {
		return x.Uri
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RecognitionAudio) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RecognitionAudio_OneofMarshaler, _RecognitionAudio_OneofUnmarshaler, _RecognitionAudio_OneofSizer, []interface{}{
		(*RecognitionAudio_Content)(nil),
		(*RecognitionAudio_Uri)(nil),
	}
}

func _RecognitionAudio_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RecognitionAudio)
	// audio_source
	switch x := m.AudioSource.(type) {
	case *RecognitionAudio_Content:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Content)
	case *RecognitionAudio_Uri:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Uri)
	case nil:
	default:
		return fmt.Errorf("RecognitionAudio.AudioSource has unexpected type %T", x)
	}
	return nil
}

func _RecognitionAudio_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RecognitionAudio)
	switch tag {
	case 1: // audio_source.content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.AudioSource = &RecognitionAudio_Content{x}
		return true, err
	case 2: // audio_source.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.AudioSource = &RecognitionAudio_Uri{x}
		return true, err
	default:
		return false, nil
	}
}

func _RecognitionAudio_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RecognitionAudio)
	// audio_source
	switch x := m.AudioSource.(type) {
	case *RecognitionAudio_Content:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Content)))
		n += len(x.Content)
	case *RecognitionAudio_Uri:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Uri)))
		n += len(x.Uri)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SyncRecognizeRequest struct {
	Config *RecognitionConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Audio  *RecognitionAudio  `protobuf:"bytes,2,opt,name=audio" json:"audio,omitempty"`
}

func (m *SyncRecognizeRequest) Reset()                    { *m = SyncRecognizeRequest{} }
func (m *SyncRecognizeRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRecognizeRequest) ProtoMessage()               {}
func (*SyncRecognizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SyncRecognizeRequest) GetConfig() *RecognitionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *SyncRecognizeRequest) GetAudio() *RecognitionAudio {
	if m != nil {
		return m.Audio
	}
	return nil
}

type SpeechRecognitionAlternative struct {
	Transcript string  `protobuf:"bytes,1,opt,name=transcript" json:"transcript,omitempty"`
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
}

func (m *SpeechRecognitionAlternative) Reset()                    { *m = SpeechRecognitionAlternative{} }
func (m *SpeechRecognitionAlternative) String() string            { return proto.CompactTextString(m) }
func (*SpeechRecognitionAlternative) ProtoMessage()               {}
func (*SpeechRecognitionAlternative) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SpeechRecognitionResult struct {
	Alternatives []*SpeechRecognitionAlternative `protobuf:"bytes,1,rep,name=alternatives" json:"alternatives,omitempty"`
}

func (m *SpeechRecognitionResult) Reset()                    { *m = SpeechRecognitionResult{} }
func (m *SpeechRecognitionResult) String() string            { return proto.CompactTextString(m) }
func (*SpeechRecognitionResult) ProtoMessage()               {}
func (*SpeechRecognitionResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SpeechRecognitionResult) GetAlternatives() []*SpeechRecognitionAlternative {
	if m != nil {
		return m.Alternatives
	}
	return nil
}

type SyncRecognizeResponse struct {
	Results []*SpeechRecognitionResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *SyncRecognizeResponse) Reset()                    { *m = SyncRecognizeResponse{} }
func (m *SyncRecognizeResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncRecognizeResponse) ProtoMessage()               {}
func (*SyncRecognizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SyncRecognizeResponse) GetResults() []*SpeechRecognitionResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*SpeechContext)(nil), "google.cloud.speech.v1beta1.SpeechContext")
	proto.RegisterType((*RecognitionConfig)(nil), "google.cloud.speech.v1beta1.RecognitionConfig")
	proto.RegisterType((*RecognitionAudio)(nil), "google.cloud.speech.v1beta1.RecognitionAudio")
	proto.RegisterType((*SyncRecognizeRequest)(nil), "google.cloud.speech.v1beta1.SyncRecognizeRequest")
	proto.RegisterType((*SpeechRecognitionAlternative)(nil), "google.cloud.speech.v1beta1.SpeechRecognitionAlternative")
	proto.RegisterType((*SpeechRecognitionResult)(nil), "google.cloud.speech.v1beta1.SpeechRecognitionResult")
	proto.RegisterType((*SyncRecognizeResponse)(nil), "google.cloud.speech.v1beta1.SyncRecognizeResponse")
	proto.RegisterEnum("google.cloud.speech.v1beta1.RecognitionConfig_AudioEncoding", RecognitionConfig_AudioEncoding_name, RecognitionConfig_AudioEncoding_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Speech service

type SpeechClient interface {
	SyncRecognize(ctx context.Context, in *SyncRecognizeRequest, opts ...grpc.CallOption) (*SyncRecognizeResponse, error)
}

type speechClient struct {
	cc *grpc.ClientConn
}

func NewSpeechClient(cc *grpc.ClientConn) SpeechClient {
	return &speechClient{cc}
}

func (c *speechClient) SyncRecognize(ctx context.Context, in *SyncRecognizeRequest, opts ...grpc.CallOption) (*SyncRecognizeResponse, error) {
	out := new(SyncRecognizeResponse)
	err := grpc.Invoke(ctx, "/google.cloud.speech.v1beta1.Speech/SyncRecognize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Speech service

type SpeechServer interface {
	SyncRecognize(context.Context, *SyncRecognizeRequest) (*SyncRecognizeResponse, error)
}

func RegisterSpeechServer(s *grpc.Server, srv SpeechServer) {
	s.RegisterService(&_Speech_serviceDesc, srv)
}

func _Speech_SyncRecognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServer).SyncRecognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.speech.v1beta1.Speech/SyncRecognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServer).SyncRecognize(ctx, req.(*SyncRecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Speech_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.speech.v1beta1.Speech",
	HandlerType: (*SpeechServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncRecognize",
			Handler:    _Speech_SyncRecognize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("proto/sync_recognize.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x6d, 0xea, 0xe6, 0x6f, 0x92, 0xb4, 0xfe, 0x56, 0xfd, 0x84, 0x15, 0x10, 0x20, 0x73, 0xd3,
	0x22, 0x61, 0x14, 0x83, 0x90, 0x90, 0xb8, 0x71, 0xdd, 0x04, 0x22, 0xa5, 0x01, 0x36, 0xaa, 0xca,
	0x0d, 0x58, 0x5b, 0x67, 0xe3, 0x5a, 0x72, 0xbd, 0xc6, 0xbb, 0x8e, 0x52, 0xae, 0x78, 0x17, 0x1e,
	0x84, 0x57, 0x63, 0xbd, 0x6e, 0x8a, 0x43, 0xab, 0xa8, 0xb9, 0xf3, 0x9e, 0x9d, 0x39, 0x33, 0x73,
	0xe6, 0x78, 0xa1, 0x9b, 0xa4, 0x4c, 0xb0, 0x97, 0xfc, 0x2a, 0xf6, 0xbd, 0x94, 0xfa, 0x2c, 0x88,
	0xc3, 0x1f, 0xd4, 0x52, 0x20, 0x7a, 0x18, 0x30, 0x16, 0x44, 0xd4, 0xf2, 0x23, 0x96, 0x4d, 0x2d,
	0x9e, 0x50, 0xea, 0x5f, 0x58, 0xf3, 0xde, 0x39, 0x15, 0xa4, 0x67, 0x1e, 0x42, 0x67, 0xa2, 0x10,
	0x97, 0xc5, 0x82, 0x2e, 0x04, 0x32, 0xa0, 0x9e, 0x5c, 0xa4, 0x84, 0x53, 0x6e, 0x54, 0x9e, 0x6a,
	0x07, 0x4d, 0xbc, 0x3c, 0x9a, 0xbf, 0x35, 0xf8, 0x0f, 0x17, 0xdc, 0x22, 0x64, 0xb1, 0x4c, 0x98,
	0x85, 0x01, 0xfa, 0x02, 0x0d, 0x1a, 0xfb, 0x6c, 0x1a, 0xc6, 0x81, 0x4c, 0xa8, 0x1c, 0xec, 0xda,
	0xef, 0xac, 0x35, 0x05, 0xad, 0x5b, 0x0c, 0x96, 0x93, 0x4d, 0x43, 0xd6, 0xbf, 0xe6, 0xc0, 0x37,
	0x6c, 0xe8, 0x09, 0xb4, 0x38, 0xb9, 0x4c, 0x22, 0xea, 0xa5, 0x44, 0x50, 0x63, 0x5b, 0x92, 0x57,
	0x31, 0x14, 0x10, 0x96, 0x08, 0x7a, 0x06, 0x9d, 0x88, 0xc4, 0x41, 0x46, 0x02, 0xea, 0xc9, 0x1c,
	0x6a, 0x68, 0x32, 0xa4, 0x89, 0xdb, 0x4b, 0xd0, 0x95, 0x18, 0x3a, 0x04, 0xfd, 0x92, 0x2c, 0x3c,
	0x12, 0x09, 0x9a, 0xc6, 0x44, 0x84, 0x73, 0x39, 0xd8, 0x8e, 0xa2, 0xda, 0x93, 0xb8, 0x53, 0x82,
	0xf3, 0x50, 0xa9, 0xd8, 0x8c, 0xc8, 0xee, 0xae, 0xbc, 0x59, 0x98, 0x5f, 0x19, 0x55, 0x19, 0xda,
	0xc0, 0x7b, 0x37, 0xf8, 0x40, 0xc1, 0xe8, 0x33, 0xec, 0x16, 0x73, 0xc9, 0xc2, 0x4a, 0x37, 0xa3,
	0x26, 0x03, 0x5b, 0xf6, 0xf3, 0xb5, 0xb3, 0xaf, 0x28, 0x8d, 0x3b, 0xbc, 0x7c, 0x34, 0x09, 0x74,
	0x56, 0x94, 0x90, 0x9b, 0xd8, 0xef, 0x8f, 0xdd, 0x8f, 0xc7, 0xc3, 0xf1, 0x7b, 0xef, 0x74, 0x3c,
	0xf9, 0xd4, 0x77, 0x87, 0x83, 0x61, 0xff, 0x58, 0xdf, 0x42, 0x6d, 0x68, 0x8c, 0x86, 0xe3, 0xbe,
	0x83, 0x7b, 0x6f, 0xf4, 0x0a, 0x6a, 0xc0, 0xce, 0x60, 0xe4, 0xb8, 0xfa, 0x36, 0x6a, 0x42, 0xf5,
	0xe4, 0x74, 0xe4, 0x9c, 0xe9, 0x1a, 0xaa, 0x83, 0xe6, 0x9c, 0x60, 0x7d, 0x07, 0x01, 0xd4, 0xe4,
	0x87, 0x77, 0x76, 0xa4, 0x57, 0x4d, 0x0c, 0x7a, 0x49, 0x7e, 0x55, 0x0d, 0x75, 0xa1, 0xae, 0x46,
	0x88, 0x85, 0x5a, 0x5f, 0xfb, 0xc3, 0x16, 0x5e, 0x02, 0x08, 0x81, 0x96, 0xa5, 0xa1, 0x52, 0xbe,
	0x29, 0xf1, 0xfc, 0x70, 0xb4, 0x0b, 0x6d, 0x92, 0x27, 0x7a, 0x9c, 0x65, 0xa9, 0x4f, 0xcd, 0x5f,
	0x15, 0xd8, 0x9f, 0x48, 0xdb, 0xe1, 0xa5, 0xeb, 0x30, 0xfd, 0x9e, 0x51, 0x2e, 0xd0, 0x00, 0x6a,
	0xbe, 0x5a, 0xb0, 0xe2, 0x6d, 0xd9, 0xd6, 0x66, 0xb6, 0xc0, 0xd7, 0xd9, 0xc8, 0x85, 0xaa, 0x2a,
	0xa8, 0xda, 0x68, 0xd9, 0x2f, 0xee, 0x4b, 0xa3, 0xc6, 0xc3, 0x45, 0xae, 0xf9, 0x0d, 0x1e, 0x15,
	0xe2, 0x97, 0x03, 0xfe, 0xee, 0x1e, 0x3d, 0x06, 0x10, 0x29, 0x89, 0xb9, 0x9f, 0x86, 0x49, 0x21,
	0x44, 0x13, 0x97, 0x90, 0xfc, 0x5e, 0xb5, 0x33, 0x95, 0xee, 0x2c, 0xac, 0xb8, 0x8d, 0x4b, 0x88,
	0xb9, 0x80, 0x07, 0xb7, 0xf8, 0x31, 0xe5, 0x59, 0x24, 0xd0, 0x57, 0x29, 0x58, 0xd9, 0x7c, 0xf9,
	0x5f, 0xd5, 0xb2, 0xdf, 0xde, 0xc3, 0x28, 0x77, 0xf7, 0x8a, 0x57, 0xe8, 0xcc, 0x00, 0xfe, 0xff,
	0x47, 0x7e, 0x9e, 0xb0, 0x98, 0x53, 0x34, 0x86, 0x7a, 0xaa, 0x3a, 0xe0, 0xb2, 0xdf, 0xbc, 0xe4,
	0xeb, 0xcd, 0x4a, 0x16, 0xed, 0xe3, 0x25, 0x89, 0xfd, 0xb3, 0x02, 0xb5, 0x22, 0x08, 0xcd, 0xe5,
	0xa3, 0x51, 0xae, 0x89, 0x7a, 0xeb, 0xa9, 0xef, 0xb0, 0x47, 0xd7, 0xde, 0x24, 0xa5, 0x18, 0xe9,
	0xbc, 0xa6, 0x1e, 0xb4, 0x57, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x07, 0xb1, 0x7e, 0x3d, 0xee,
	0x04, 0x00, 0x00,
}
