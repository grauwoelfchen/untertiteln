// Code generated by protoc-gen-go.
// source: proto/streaming_recognize/streaming_recognize.proto
// DO NOT EDIT!

/*
Package google_cloud_speech_v1beta1 is a generated protocol buffer package.

It is generated from these files:
	proto/streaming_recognize/streaming_recognize.proto

It has these top-level messages:
	SpeechContext
	RecognitionConfig
	StreamingRecognitionConfig
	StreamingRecognizeRequest
	SpeechRecognitionAlternative
	StreamingRecognitionResult
	StreamingRecognizeResponse
*/
package google_cloud_speech_v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_rpc "proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RecognitionConfig_AudioEncoding int32

const (
	RecognitionConfig_ENCODING_UNSPECIFIED RecognitionConfig_AudioEncoding = 0
	RecognitionConfig_LINEAR16             RecognitionConfig_AudioEncoding = 1
	RecognitionConfig_FLAC                 RecognitionConfig_AudioEncoding = 2
	RecognitionConfig_MULAW                RecognitionConfig_AudioEncoding = 3
	RecognitionConfig_AMR                  RecognitionConfig_AudioEncoding = 4
	RecognitionConfig_AMR_WB               RecognitionConfig_AudioEncoding = 5
)

var RecognitionConfig_AudioEncoding_name = map[int32]string{
	0: "ENCODING_UNSPECIFIED",
	1: "LINEAR16",
	2: "FLAC",
	3: "MULAW",
	4: "AMR",
	5: "AMR_WB",
}
var RecognitionConfig_AudioEncoding_value = map[string]int32{
	"ENCODING_UNSPECIFIED": 0,
	"LINEAR16":             1,
	"FLAC":                 2,
	"MULAW":                3,
	"AMR":                  4,
	"AMR_WB":               5,
}

func (x RecognitionConfig_AudioEncoding) String() string {
	return proto.EnumName(RecognitionConfig_AudioEncoding_name, int32(x))
}
func (RecognitionConfig_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type StreamingRecognizeResponse_EndpointerType int32

const (
	StreamingRecognizeResponse_ENDPOINTER_EVENT_UNSPECIFIED StreamingRecognizeResponse_EndpointerType = 0
	StreamingRecognizeResponse_START_OF_SPEECH              StreamingRecognizeResponse_EndpointerType = 1
	StreamingRecognizeResponse_END_OF_SPEECH                StreamingRecognizeResponse_EndpointerType = 2
	StreamingRecognizeResponse_END_OF_AUDIO                 StreamingRecognizeResponse_EndpointerType = 3
	StreamingRecognizeResponse_END_OF_UTTERANCE             StreamingRecognizeResponse_EndpointerType = 4
)

var StreamingRecognizeResponse_EndpointerType_name = map[int32]string{
	0: "ENDPOINTER_EVENT_UNSPECIFIED",
	1: "START_OF_SPEECH",
	2: "END_OF_SPEECH",
	3: "END_OF_AUDIO",
	4: "END_OF_UTTERANCE",
}
var StreamingRecognizeResponse_EndpointerType_value = map[string]int32{
	"ENDPOINTER_EVENT_UNSPECIFIED": 0,
	"START_OF_SPEECH":              1,
	"END_OF_SPEECH":                2,
	"END_OF_AUDIO":                 3,
	"END_OF_UTTERANCE":             4,
}

func (x StreamingRecognizeResponse_EndpointerType) String() string {
	return proto.EnumName(StreamingRecognizeResponse_EndpointerType_name, int32(x))
}
func (StreamingRecognizeResponse_EndpointerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0}
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.SpeechContext
type SpeechContext struct {
	Phrases []string `protobuf:"bytes,1,rep,name=phrases" json:"phrases,omitempty"`
}

func (m *SpeechContext) Reset()                    { *m = SpeechContext{} }
func (m *SpeechContext) String() string            { return proto.CompactTextString(m) }
func (*SpeechContext) ProtoMessage()               {}
func (*SpeechContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.RecognitionConfig
type RecognitionConfig struct {
	Encoding        RecognitionConfig_AudioEncoding `protobuf:"varint,1,opt,name=encoding,enum=google.cloud.speech.v1beta1.RecognitionConfig_AudioEncoding" json:"encoding,omitempty"`
	SampleRate      int32                           `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	LanguageCode    string                          `protobuf:"bytes,3,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	MaxAlternatives int32                           `protobuf:"varint,4,opt,name=max_alternatives,json=maxAlternatives" json:"max_alternatives,omitempty"`
	ProfanityFilter bool                            `protobuf:"varint,5,opt,name=profanity_filter,json=profanityFilter" json:"profanity_filter,omitempty"`
	SpeechContext   *SpeechContext                  `protobuf:"bytes,6,opt,name=speech_context,json=speechContext" json:"speech_context,omitempty"`
}

func (m *RecognitionConfig) Reset()                    { *m = RecognitionConfig{} }
func (m *RecognitionConfig) String() string            { return proto.CompactTextString(m) }
func (*RecognitionConfig) ProtoMessage()               {}
func (*RecognitionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RecognitionConfig) GetSpeechContext() *SpeechContext {
	if m != nil {
		return m.SpeechContext
	}
	return nil
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.StreamingRecognitionConfig
type StreamingRecognitionConfig struct {
	Config          *RecognitionConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	SingleUtterance bool               `protobuf:"varint,2,opt,name=single_utterance,json=singleUtterance" json:"single_utterance,omitempty"`
	InterimResults  bool               `protobuf:"varint,3,opt,name=interim_results,json=interimResults" json:"interim_results,omitempty"`
}

func (m *StreamingRecognitionConfig) Reset()                    { *m = StreamingRecognitionConfig{} }
func (m *StreamingRecognitionConfig) String() string            { return proto.CompactTextString(m) }
func (*StreamingRecognitionConfig) ProtoMessage()               {}
func (*StreamingRecognitionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StreamingRecognitionConfig) GetConfig() *RecognitionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.StreamingRecognizeRequest
type StreamingRecognizeRequest struct {
	StreamingConfig *StreamingRecognitionConfig `protobuf:"bytes,1,opt,name=streaming_config,json=streamingConfig" json:"streaming_config,omitempty"`
	AudioContent    []byte                      `protobuf:"bytes,2,opt,name=audio_content,json=audioContent,proto3" json:"audio_content,omitempty"`
}

func (m *StreamingRecognizeRequest) Reset()                    { *m = StreamingRecognizeRequest{} }
func (m *StreamingRecognizeRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamingRecognizeRequest) ProtoMessage()               {}
func (*StreamingRecognizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StreamingRecognizeRequest) GetStreamingConfig() *StreamingRecognitionConfig {
	if m != nil {
		return m.StreamingConfig
	}
	return nil
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.SpeechRecognitionAlternative
type SpeechRecognitionAlternative struct {
	Transcript string  `protobuf:"bytes,1,opt,name=transcript" json:"transcript,omitempty"`
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
}

func (m *SpeechRecognitionAlternative) Reset()                    { *m = SpeechRecognitionAlternative{} }
func (m *SpeechRecognitionAlternative) String() string            { return proto.CompactTextString(m) }
func (*SpeechRecognitionAlternative) ProtoMessage()               {}
func (*SpeechRecognitionAlternative) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.SpeechRecognitionResult
type StreamingRecognitionResult struct {
	Alternatives []*SpeechRecognitionAlternative `protobuf:"bytes,1,rep,name=alternatives" json:"alternatives,omitempty"`
	IsFinal      bool                            `protobuf:"varint,2,opt,name=is_final,json=isFinal" json:"is_final,omitempty"`
	Stability    float32                         `protobuf:"fixed32,3,opt,name=stability" json:"stability,omitempty"`
}

func (m *StreamingRecognitionResult) Reset()                    { *m = StreamingRecognitionResult{} }
func (m *StreamingRecognitionResult) String() string            { return proto.CompactTextString(m) }
func (*StreamingRecognitionResult) ProtoMessage()               {}
func (*StreamingRecognitionResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StreamingRecognitionResult) GetAlternatives() []*SpeechRecognitionAlternative {
	if m != nil {
		return m.Alternatives
	}
	return nil
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.StreamingRecognizeResponse
type StreamingRecognizeResponse struct {
	Error          *google_rpc.Status                        `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Results        []*StreamingRecognitionResult             `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	ResultIndex    int32                                     `protobuf:"varint,3,opt,name=result_index,json=resultIndex" json:"result_index,omitempty"`
	EndpointerType StreamingRecognizeResponse_EndpointerType `protobuf:"varint,4,opt,name=endpointer_type,json=endpointerType,enum=google.cloud.speech.v1beta1.StreamingRecognizeResponse_EndpointerType" json:"endpointer_type,omitempty"`
}

func (m *StreamingRecognizeResponse) Reset()                    { *m = StreamingRecognizeResponse{} }
func (m *StreamingRecognizeResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamingRecognizeResponse) ProtoMessage()               {}
func (*StreamingRecognizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StreamingRecognizeResponse) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *StreamingRecognizeResponse) GetResults() []*StreamingRecognitionResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*SpeechContext)(nil), "google.cloud.speech.v1beta1.SpeechContext")
	proto.RegisterType((*RecognitionConfig)(nil), "google.cloud.speech.v1beta1.RecognitionConfig")
	proto.RegisterType((*StreamingRecognitionConfig)(nil), "google.cloud.speech.v1beta1.StreamingRecognitionConfig")
	proto.RegisterType((*StreamingRecognizeRequest)(nil), "google.cloud.speech.v1beta1.StreamingRecognizeRequest")
	proto.RegisterType((*SpeechRecognitionAlternative)(nil), "google.cloud.speech.v1beta1.SpeechRecognitionAlternative")
	proto.RegisterType((*StreamingRecognitionResult)(nil), "google.cloud.speech.v1beta1.StreamingRecognitionResult")
	proto.RegisterType((*StreamingRecognizeResponse)(nil), "google.cloud.speech.v1beta1.StreamingRecognizeResponse")
	proto.RegisterEnum("google.cloud.speech.v1beta1.RecognitionConfig_AudioEncoding", RecognitionConfig_AudioEncoding_name, RecognitionConfig_AudioEncoding_value)
	proto.RegisterEnum("google.cloud.speech.v1beta1.StreamingRecognizeResponse_EndpointerType", StreamingRecognizeResponse_EndpointerType_name, StreamingRecognizeResponse_EndpointerType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Speech service

type SpeechClient interface {
	StreamingRecognize(ctx context.Context, in *StreamingRecognizeRequest, opts ...grpc.CallOption) (*StreamingRecognizeResponse, error)
}

type speechClient struct {
	cc *grpc.ClientConn
}

func NewSpeechClient(cc *grpc.ClientConn) SpeechClient {
	return &speechClient{cc}
}

func (c *speechClient) StreamingRecognize(ctx context.Context, in *StreamingRecognizeRequest, opts ...grpc.CallOption) (*StreamingRecognizeResponse, error) {
	out := new(StreamingRecognizeResponse)
	err := grpc.Invoke(ctx, "/google.cloud.speech.v1beta1.Speech/StreamingRecognize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Speech service

type SpeechServer interface {
	StreamingRecognize(context.Context, *StreamingRecognizeRequest) (*StreamingRecognizeResponse, error)
}

func RegisterSpeechServer(s *grpc.Server, srv SpeechServer) {
	s.RegisterService(&_Speech_serviceDesc, srv)
}

func _Speech_StreamingRecognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamingRecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServer).StreamingRecognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.speech.v1beta1.Speech/StreamingRecognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServer).StreamingRecognize(ctx, req.(*StreamingRecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Speech_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.speech.v1beta1.Speech",
	HandlerType: (*SpeechServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StreamingRecognize",
			Handler:    _Speech_StreamingRecognize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("proto/streaming_recognize/streaming_recognize.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 815 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xc6, 0xc9, 0x26, 0x9b, 0xbc, 0xfc, 0x72, 0x87, 0x1e, 0xd2, 0x65, 0x05, 0xc5, 0x1c, 0xd8,
	0x72, 0x30, 0xda, 0x54, 0x6a, 0x85, 0xc4, 0xc5, 0x78, 0x1d, 0x88, 0xb4, 0xf5, 0x96, 0xd9, 0x84,
	0x72, 0x01, 0x6b, 0xd6, 0x99, 0x4d, 0x2d, 0x39, 0xb6, 0xf1, 0x4c, 0xaa, 0x6d, 0x8f, 0x48, 0xdc,
	0xf9, 0x23, 0xf8, 0x0b, 0x10, 0x07, 0x6e, 0xfc, 0x6b, 0x3c, 0xcf, 0xd8, 0x69, 0xd2, 0x74, 0x57,
	0x84, 0x9b, 0xe7, 0x9b, 0x37, 0xdf, 0xbc, 0xf7, 0x7d, 0x6f, 0x9e, 0xe1, 0x71, 0x96, 0xa7, 0x32,
	0xfd, 0x52, 0xc8, 0x9c, 0xb3, 0x65, 0x94, 0x2c, 0x82, 0x9c, 0x87, 0xe9, 0x22, 0x89, 0xde, 0xf0,
	0xf7, 0x61, 0xb6, 0x8a, 0x26, 0x1f, 0x2d, 0xd2, 0x74, 0x11, 0x73, 0x3b, 0x8c, 0xd3, 0xd5, 0xdc,
	0x16, 0x19, 0xe7, 0xe1, 0x4b, 0xfb, 0xd5, 0xe9, 0x15, 0x97, 0xec, 0xf4, 0x88, 0x54, 0x8c, 0x4c,
	0xae, 0x84, 0x3e, 0x60, 0x3d, 0x82, 0xde, 0xa5, 0x8a, 0x72, 0xd3, 0x44, 0xf2, 0x1b, 0x49, 0x86,
	0x70, 0x98, 0xbd, 0xcc, 0x99, 0xe0, 0x62, 0x68, 0x3c, 0xac, 0x9f, 0xb4, 0x69, 0xb5, 0xb4, 0xfe,
	0xa9, 0xc3, 0x3d, 0xaa, 0xef, 0x93, 0x51, 0x9a, 0xe0, 0x81, 0xeb, 0x68, 0x41, 0x7e, 0x84, 0x16,
	0x4f, 0xc2, 0x74, 0x8e, 0xd9, 0xe0, 0x01, 0xe3, 0xa4, 0x3f, 0xfa, 0xda, 0xbe, 0x23, 0x09, 0x7b,
	0x87, 0xc1, 0x76, 0x56, 0xf3, 0x28, 0xf5, 0x4a, 0x0e, 0xba, 0x66, 0x23, 0x9f, 0x40, 0x47, 0xb0,
	0x65, 0x16, 0xf3, 0x20, 0x67, 0x92, 0x0f, 0x6b, 0x48, 0xde, 0xa0, 0xa0, 0x21, 0x8a, 0x08, 0xf9,
	0x0c, 0x7a, 0x31, 0x4b, 0x16, 0x2b, 0xb6, 0xe0, 0x01, 0x9e, 0xe1, 0xc3, 0x3a, 0x86, 0xb4, 0x69,
	0xb7, 0x02, 0x5d, 0xc4, 0xc8, 0x23, 0x30, 0x97, 0xec, 0x26, 0x60, 0xb1, 0xe4, 0x79, 0xc2, 0x64,
	0xf4, 0x0a, 0x0b, 0x3b, 0x50, 0x54, 0x03, 0xc4, 0x9d, 0x0d, 0xb8, 0x08, 0x45, 0x51, 0xae, 0x19,
	0x66, 0xf7, 0x3a, 0xb8, 0x8e, 0x8a, 0xad, 0x61, 0x03, 0x43, 0x5b, 0x74, 0xb0, 0xc6, 0xc7, 0x0a,
	0x26, 0xdf, 0x43, 0x5f, 0xd7, 0x85, 0x17, 0x2b, 0xdd, 0x86, 0x4d, 0x0c, 0xec, 0x8c, 0xbe, 0xb8,
	0xb3, 0xf6, 0x2d, 0xa5, 0x69, 0x4f, 0x6c, 0x2e, 0x2d, 0x06, 0xbd, 0x2d, 0x25, 0xd0, 0x89, 0xfb,
	0x9e, 0xef, 0x5e, 0x9c, 0x4d, 0xfc, 0x6f, 0x83, 0x99, 0x7f, 0xf9, 0xdc, 0x73, 0x27, 0xe3, 0x89,
	0x77, 0x66, 0x7e, 0x40, 0xba, 0xd0, 0x3a, 0x9f, 0xf8, 0x9e, 0x43, 0x4f, 0x9f, 0x98, 0x06, 0x69,
	0xc1, 0xc1, 0xf8, 0xdc, 0x71, 0xcd, 0x1a, 0x69, 0x43, 0xe3, 0xd9, 0xec, 0xdc, 0x79, 0x61, 0xd6,
	0xc9, 0x21, 0xd4, 0x9d, 0x67, 0xd4, 0x3c, 0x20, 0x00, 0x4d, 0xfc, 0x08, 0x5e, 0x7c, 0x63, 0x36,
	0xac, 0xbf, 0x0d, 0x38, 0xba, 0xac, 0x7a, 0x67, 0xd7, 0xca, 0x31, 0x34, 0x43, 0xf5, 0xa5, 0x8c,
	0xec, 0x8c, 0xec, 0xfd, 0x8c, 0xa4, 0xe5, 0xe9, 0x42, 0x47, 0x81, 0x17, 0xa0, 0x71, 0x2b, 0x89,
	0x62, 0xb1, 0x24, 0xd4, 0xee, 0xa1, 0x8e, 0x1a, 0x9f, 0x55, 0x30, 0xf9, 0x1c, 0x06, 0x11, 0x96,
	0x9f, 0x47, 0x4b, 0x6c, 0x65, 0xb1, 0x8a, 0xa5, 0x50, 0x26, 0xb6, 0x68, 0xbf, 0x84, 0xa9, 0x46,
	0xad, 0x3f, 0x0c, 0x78, 0xf0, 0x6e, 0xea, 0x6f, 0x38, 0xe5, 0xbf, 0xac, 0xb8, 0x90, 0xe4, 0x0a,
	0x6f, 0x5c, 0xbf, 0x89, 0xad, 0x1a, 0x9e, 0xde, 0x6d, 0xc8, 0xad, 0x62, 0x60, 0xaa, 0xd5, 0x5e,
	0xa9, 0x0e, 0x76, 0x1b, 0x2b, 0xfc, 0xd1, 0x8e, 0x27, 0x52, 0x95, 0xd4, 0xa5, 0x5d, 0x05, 0xba,
	0x1a, 0xb3, 0x7e, 0x86, 0x63, 0x6d, 0xf2, 0x06, 0xe1, 0x46, 0x8f, 0x91, 0x8f, 0x01, 0x24, 0x56,
	0x2e, 0xc2, 0x3c, 0xca, 0xa4, 0x4a, 0xb1, 0x4d, 0x37, 0x90, 0x62, 0x5f, 0xa5, 0x3f, 0xe7, 0x95,
	0x68, 0x35, 0xba, 0x81, 0x58, 0x7f, 0xdd, 0xe2, 0xa0, 0x96, 0x89, 0xfc, 0x04, 0xdd, 0xad, 0x46,
	0x2f, 0x5e, 0x70, 0x67, 0xf4, 0xd5, 0x7f, 0x68, 0xca, 0xf7, 0xe7, 0x4b, 0xb7, 0xe8, 0xc8, 0x03,
	0x68, 0x45, 0x02, 0x5f, 0x46, 0xc2, 0xe2, 0xd2, 0xd0, 0xc3, 0x48, 0x8c, 0x8b, 0x25, 0x39, 0x86,
	0x36, 0xce, 0x95, 0xab, 0x28, 0xc6, 0x37, 0xa2, 0x2c, 0xac, 0xd1, 0xb7, 0x80, 0xf5, 0x67, 0x7d,
	0x37, 0xed, 0xc2, 0x3d, 0x91, 0xa5, 0x89, 0xe0, 0xe4, 0x04, 0x1a, 0x3c, 0xcf, 0xd3, 0xbc, 0xf4,
	0x8c, 0x54, 0xf9, 0xe6, 0x59, 0x88, 0x16, 0x15, 0xd3, 0x8a, 0xea, 0x00, 0x7c, 0x77, 0x87, 0x55,
	0x9f, 0xd4, 0x54, 0x6d, 0xfb, 0xfb, 0xab, 0xa5, 0xa2, 0x15, 0x0f, 0xf9, 0x14, 0xba, 0xfa, 0x33,
	0x88, 0x92, 0x39, 0xbf, 0x51, 0xc9, 0x37, 0x68, 0x47, 0x63, 0x93, 0x02, 0x22, 0x29, 0x0c, 0x78,
	0x32, 0xcf, 0x52, 0xd5, 0x93, 0x81, 0x7c, 0x9d, 0x71, 0x35, 0x42, 0xfa, 0xa3, 0xf1, 0x5e, 0xb7,
	0xbf, 0xad, 0xd8, 0xf6, 0xd6, 0x74, 0x53, 0x64, 0xa3, 0x7d, 0xbe, 0xb5, 0xb6, 0x7e, 0x35, 0xa0,
	0xbf, 0x1d, 0x42, 0x1e, 0xc2, 0xb1, 0xe7, 0x9f, 0x3d, 0xbf, 0x98, 0xf8, 0x53, 0x8f, 0x06, 0xde,
	0x0f, 0x9e, 0x3f, 0x7d, 0x67, 0x2a, 0x7c, 0x08, 0x83, 0xcb, 0xa9, 0x43, 0xa7, 0xc1, 0xc5, 0x38,
	0x40, 0xdc, 0x73, 0xbf, 0xc3, 0xe1, 0x70, 0x0f, 0x7a, 0x78, 0x6c, 0x03, 0xaa, 0x11, 0x13, 0xba,
	0x25, 0xe4, 0xcc, 0xce, 0x26, 0x17, 0x38, 0x2c, 0xee, 0x83, 0x59, 0x22, 0xb3, 0x29, 0xb2, 0x3b,
	0xbe, 0xeb, 0x99, 0x07, 0xa3, 0xdf, 0x0d, 0x68, 0xea, 0xe6, 0x20, 0xbf, 0x19, 0x40, 0x76, 0xab,
	0x21, 0x4f, 0xf6, 0x2e, 0x5f, 0x3d, 0xd7, 0xa3, 0xa7, 0xff, 0x53, 0xb6, 0xab, 0xa6, 0xfa, 0x69,
	0x3d, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x71, 0x64, 0xd8, 0x1c, 0x07, 0x00, 0x00,
}
