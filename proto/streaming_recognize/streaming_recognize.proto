syntax = "proto3";

package google.cloud.speech.v1beta1;

import "proto/status.proto";

service Speech {
  rpc StreamingRecognize(StreamingRecognizeRequest) returns
    (StreamingRecognizeResponse);
}


// Request

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.SpeechContext
message SpeechContext {
  repeated string phrases = 1;
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.RecognitionConfig
message RecognitionConfig {
  enum AudioEncoding {
    ENCODING_UNSPECIFIED = 0;
    LINEAR16 = 1;
    FLAC = 2;
    MULAW = 3;
    AMR = 4;
    AMR_WB = 5;
  }
  AudioEncoding encoding = 1;
  int32 sample_rate = 2;
  string language_code = 3;
  int32 max_alternatives = 4;
  bool profanity_filter = 5;
  SpeechContext speech_context = 6;
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.StreamingRecognitionConfig
message StreamingRecognitionConfig {
  RecognitionConfig config = 1;
  bool single_utterance = 2;
  bool interim_results = 3;
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.StreamingRecognizeRequest
message StreamingRecognizeRequest {
  StreamingRecognitionConfig streaming_config = 1;
  bytes audio_content = 2;
}


// Response

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.SpeechRecognitionAlternative
message SpeechRecognitionAlternative {
  string transcript = 1;
  float confidence = 2;
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.SpeechRecognitionResult
message StreamingRecognitionResult {
  repeated SpeechRecognitionAlternative alternatives = 1;
  bool is_final = 2;
  float stability = 3;
}

// https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1beta1 \
//   #google.cloud.speech.v1beta1.StreamingRecognizeResponse
message StreamingRecognizeResponse {
  enum EndpointerType {
    ENDPOINTER_EVENT_UNSPECIFIED = 0;
    START_OF_SPEECH = 1;
    END_OF_SPEECH = 2;
    END_OF_AUDIO = 3;
    END_OF_UTTERANCE = 4;
  }

  google.rpc.Status error = 1;
  repeated StreamingRecognitionResult results = 2;
  int32 result_index = 3;
  EndpointerType endpointer_type = 4;
}
